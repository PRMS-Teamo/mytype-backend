
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Apply_historyScalarFieldEnum = {
  id: 'id',
  team_id: 'team_id',
  user_id: 'user_id',
  ment: 'ment',
  apply_status: 'apply_status',
  apply_from: 'apply_from',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PositionsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Stack_categoriesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StacksScalarFieldEnum = {
  id: 'id',
  category_id: 'category_id',
  name: 'name',
  img_url: 'img_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Team_stack_positionsScalarFieldEnum = {
  id: 'id',
  team_id: 'team_id',
  stack_id: 'stack_id',
  position_id: 'position_id',
  status: 'status',
  recruit_status: 'recruit_status',
  count: 'count',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Team_usersScalarFieldEnum = {
  user_id: 'user_id',
  team_position_id: 'team_position_id',
  isOwner: 'isOwner',
  message: 'message',
  member_status: 'member_status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TeamsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  user_id: 'user_id',
  Field: 'Field',
  recruit_status: 'recruit_status',
  proceed_type: 'proceed_type',
  img: 'img',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_stacksScalarFieldEnum = {
  user_id: 'user_id',
  stack_id: 'stack_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  position_id: 'position_id',
  role: 'role',
  name: 'name',
  nickname: 'nickname',
  salt: 'salt',
  github_url: 'github_url',
  img: 'img',
  address: 'address',
  join_status: 'join_status',
  create_at: 'create_at',
  updated_at: 'updated_at',
  Field: 'Field',
  preferred_meeting: 'preferred_meeting'
};

exports.Prisma.User_authsScalarFieldEnum = {
  user_id: 'user_id',
  auth_id: 'auth_id',
  external_id: 'external_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Auth_methodsScalarFieldEnum = {
  id: 'id',
  auth_method: 'auth_method',
  platform: 'platform',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.apply_status = exports.$Enums.apply_status = {
  FAILED: 'FAILED',
  SUBMITTED: 'SUBMITTED',
  SUCCESS: 'SUCCESS',
  REJECTED: 'REJECTED'
};

exports.apply_from = exports.$Enums.apply_from = {
  INDIVIDUAL: 'INDIVIDUAL',
  OWNER: 'OWNER'
};

exports.recruit_status = exports.$Enums.recruit_status = {
  OPEN: 'OPEN',
  CLOSE: 'CLOSE'
};

exports.member_status = exports.$Enums.member_status = {
  ON_BOARD: 'ON_BOARD',
  OFF_BOARD: 'OFF_BOARD'
};

exports.proceed_type = exports.$Enums.proceed_type = {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  BOTH: 'BOTH'
};

exports.roles = exports.$Enums.roles = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MASTER: 'MASTER'
};

exports.meetings = exports.$Enums.meetings = {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  BOTH: 'BOTH'
};

exports.auth_method = exports.$Enums.auth_method = {
  OAuth: 'OAuth',
  Social: 'Social'
};

exports.Prisma.ModelName = {
  apply_history: 'apply_history',
  positions: 'positions',
  stack_categories: 'stack_categories',
  stacks: 'stacks',
  team_stack_positions: 'team_stack_positions',
  team_users: 'team_users',
  teams: 'teams',
  user_stacks: 'user_stacks',
  users: 'users',
  user_auths: 'user_auths',
  auth_methods: 'auth_methods'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
